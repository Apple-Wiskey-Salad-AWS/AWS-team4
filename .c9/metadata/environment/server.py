{"filter":false,"title":"server.py","tooltip":"/server.py","undoManager":{"mark":25,"position":25,"stack":[[{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"insert","lines":["from fastapi import FastAPI","from fastapi.responses import JSONResponse","","import pandas as pd","from endpoint_util import EndpointUtil","","","local_folder_path = '/data/'","endpoint_name= \"++++ 여러분의 endpoint 이름을 쓰세요 ++++\"","bucket_name = \"++++ 여러분의 버킷 이름을 쓰세요 ++++\"","endpoint = EndpointUtil(bucket_name, endpoint_name, local_folder_path)","","","app = FastAPI()","","@app.get(\"/\")","async def hello():","    return {\"hello\":\"world\"}","","","@app.get(\"/{user_id}/{threshold}\")","async def root(user_id: str, threshold: str):","    pred_df = endpoint.call(int(user_id), float(threshold))","    print(f'pred_df = {type(pred_df)}')","    ","    # Convert the recommendations to a JSON-serializable format","    pred_df = pred_df.to_dict(orient='records')","","    return JSONResponse(content=pred_df)","","","@app.get('/get_movie_info')","async def get_movie_info():","    movies_df = pd.read_csv('movies.csv')","    return JSONResponse(content=movies_df.to_dict(orient='records'))","","if __name__ == '__main__':","    import uvicorn","    uvicorn.run(\"server:app\", host='0.0.0.0', port=8000, workers=1)  # reload=False 권장",""],"id":5}],[{"start":{"row":9,"column":15},"end":{"row":9,"column":40},"action":"remove","lines":["++++ 여러분의 버킷 이름을 쓰세요 ++++"],"id":6},{"start":{"row":9,"column":15},"end":{"row":9,"column":16},"action":"insert","lines":["n"]},{"start":{"row":9,"column":16},"end":{"row":9,"column":17},"action":"insert","lines":["e"]},{"start":{"row":9,"column":17},"end":{"row":9,"column":18},"action":"insert","lines":["w"]},{"start":{"row":9,"column":18},"end":{"row":9,"column":19},"action":"insert","lines":["d"]},{"start":{"row":9,"column":19},"end":{"row":9,"column":20},"action":"insert","lines":["a"]}],[{"start":{"row":9,"column":20},"end":{"row":9,"column":21},"action":"insert","lines":["t"],"id":7},{"start":{"row":9,"column":21},"end":{"row":9,"column":22},"action":"insert","lines":["a"]},{"start":{"row":9,"column":22},"end":{"row":9,"column":23},"action":"insert","lines":["a"]}],[{"start":{"row":38,"column":53},"end":{"row":38,"column":54},"action":"remove","lines":["0"],"id":8}],[{"start":{"row":38,"column":53},"end":{"row":38,"column":54},"action":"insert","lines":["8"],"id":9}],[{"start":{"row":8,"column":16},"end":{"row":8,"column":47},"action":"remove","lines":["++++ 여러분의 endpoint 이름을 쓰세요 ++++"],"id":11},{"start":{"row":8,"column":16},"end":{"row":8,"column":35},"action":"insert","lines":["ep-xray-detection-4"]}],[{"start":{"row":7,"column":24},"end":{"row":7,"column":25},"action":"remove","lines":["t"],"id":12},{"start":{"row":7,"column":23},"end":{"row":7,"column":24},"action":"remove","lines":["a"]},{"start":{"row":7,"column":22},"end":{"row":7,"column":23},"action":"remove","lines":["d"]}],[{"start":{"row":7,"column":22},"end":{"row":7,"column":23},"action":"insert","lines":["a"],"id":13},{"start":{"row":7,"column":23},"end":{"row":7,"column":24},"action":"insert","lines":["a"]}],[{"start":{"row":7,"column":26},"end":{"row":7,"column":27},"action":"insert","lines":["t"],"id":14},{"start":{"row":7,"column":27},"end":{"row":7,"column":28},"action":"insert","lines":["e"]},{"start":{"row":7,"column":28},"end":{"row":7,"column":29},"action":"insert","lines":["s"]},{"start":{"row":7,"column":29},"end":{"row":7,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":7,"column":30},"end":{"row":7,"column":31},"action":"insert","lines":["/"],"id":15}],[{"start":{"row":31,"column":15},"end":{"row":31,"column":20},"action":"remove","lines":["movie"],"id":18},{"start":{"row":31,"column":15},"end":{"row":31,"column":20},"action":"insert","lines":["movie"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":20},"action":"remove","lines":["movie"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["ㅊ"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"remove","lines":["ㅊ"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["치"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"remove","lines":["치"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["침"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"remove","lines":["침"]},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["침"]}],[{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"remove","lines":["침"],"id":19},{"start":{"row":31,"column":14},"end":{"row":31,"column":15},"action":"remove","lines":["_"]}],[{"start":{"row":31,"column":14},"end":{"row":31,"column":15},"action":"insert","lines":["_"],"id":20},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["c"]},{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"insert","lines":["l"]},{"start":{"row":31,"column":17},"end":{"row":31,"column":18},"action":"insert","lines":["a"]},{"start":{"row":31,"column":18},"end":{"row":31,"column":19},"action":"insert","lines":["s"]},{"start":{"row":31,"column":19},"end":{"row":31,"column":20},"action":"insert","lines":["s"]}],[{"start":{"row":32,"column":18},"end":{"row":32,"column":19},"action":"remove","lines":["e"],"id":21},{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"remove","lines":["i"]},{"start":{"row":32,"column":16},"end":{"row":32,"column":17},"action":"remove","lines":["v"]},{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"remove","lines":["o"]},{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"remove","lines":["m"]}],[{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"insert","lines":["c"],"id":22},{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"insert","lines":["l"]},{"start":{"row":32,"column":16},"end":{"row":32,"column":17},"action":"insert","lines":["a"]},{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"insert","lines":["s"]},{"start":{"row":32,"column":18},"end":{"row":32,"column":19},"action":"insert","lines":["s"]}],[{"start":{"row":33,"column":35},"end":{"row":33,"column":36},"action":"insert","lines":["]"],"id":23}],[{"start":{"row":33,"column":35},"end":{"row":33,"column":36},"action":"remove","lines":["]"],"id":24},{"start":{"row":33,"column":34},"end":{"row":33,"column":35},"action":"remove","lines":["s"]},{"start":{"row":33,"column":33},"end":{"row":33,"column":34},"action":"remove","lines":["e"]},{"start":{"row":33,"column":32},"end":{"row":33,"column":33},"action":"remove","lines":["i"]},{"start":{"row":33,"column":31},"end":{"row":33,"column":32},"action":"remove","lines":["v"]},{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"remove","lines":["o"]},{"start":{"row":33,"column":29},"end":{"row":33,"column":30},"action":"remove","lines":["m"]}],[{"start":{"row":33,"column":29},"end":{"row":33,"column":30},"action":"insert","lines":["c"],"id":25},{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"insert","lines":["a"]}],[{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"remove","lines":["a"],"id":26}],[{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"insert","lines":["l"],"id":27},{"start":{"row":33,"column":31},"end":{"row":33,"column":32},"action":"insert","lines":["a"]},{"start":{"row":33,"column":32},"end":{"row":33,"column":33},"action":"insert","lines":["s"]},{"start":{"row":33,"column":33},"end":{"row":33,"column":34},"action":"insert","lines":["s"]}],[{"start":{"row":33,"column":29},"end":{"row":33,"column":34},"action":"remove","lines":["class"],"id":28},{"start":{"row":33,"column":29},"end":{"row":33,"column":41},"action":"insert","lines":["classes.txt'"]}],[{"start":{"row":33,"column":44},"end":{"row":33,"column":45},"action":"remove","lines":["v"],"id":29},{"start":{"row":33,"column":43},"end":{"row":33,"column":44},"action":"remove","lines":["s"]},{"start":{"row":33,"column":42},"end":{"row":33,"column":43},"action":"remove","lines":["c"]},{"start":{"row":33,"column":41},"end":{"row":33,"column":42},"action":"remove","lines":["."]},{"start":{"row":33,"column":40},"end":{"row":33,"column":42},"action":"remove","lines":["''"]}],[{"start":{"row":33,"column":40},"end":{"row":33,"column":41},"action":"insert","lines":["'"],"id":30}],[{"start":{"row":33,"column":26},"end":{"row":33,"column":27},"action":"remove","lines":["v"],"id":31},{"start":{"row":33,"column":25},"end":{"row":33,"column":26},"action":"remove","lines":["s"]},{"start":{"row":33,"column":24},"end":{"row":33,"column":25},"action":"remove","lines":["c"]}],[{"start":{"row":33,"column":24},"end":{"row":33,"column":25},"action":"insert","lines":["t"],"id":32},{"start":{"row":33,"column":25},"end":{"row":33,"column":26},"action":"insert","lines":["x"]},{"start":{"row":33,"column":26},"end":{"row":33,"column":27},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":0},"end":{"row":39,"column":0},"action":"remove","lines":["from fastapi import FastAPI","from fastapi.responses import JSONResponse","","import pandas as pd","from endpoint_util import EndpointUtil","","","local_folder_path = '/aaa/test/'","endpoint_name= \"ep-xray-detection-4\"","bucket_name = \"newdataa\"","endpoint = EndpointUtil(bucket_name, endpoint_name, local_folder_path)","","","app = FastAPI()","","@app.get(\"/\")","async def hello():","    return {\"hello\":\"world\"}","","","@app.get(\"/{user_id}/{threshold}\")","async def root(user_id: str, threshold: str):","    pred_df = endpoint.call(int(user_id), float(threshold))","    print(f'pred_df = {type(pred_df)}')","    ","    # Convert the recommendations to a JSON-serializable format","    pred_df = pred_df.to_dict(orient='records')","","    return JSONResponse(content=pred_df)","","","@app.get('/get_class_info')","async def get_class_info():","    movies_df = pd.read_txt('classes.txt')","    return JSONResponse(content=movies_df.to_dict(orient='records'))","","if __name__ == '__main__':","    import uvicorn","    uvicorn.run(\"server:app\", host='0.0.0.0', port=8080, workers=1)  # reload=False 권장",""],"id":33},{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["from fastapi import FastAPI","from fastapi.responses import JSONResponse","","import pandas as pd","import ast","from endpoint_util import EndpointUtil","","","local_folder_path = '/aaa/test/'","endpoint_name = \"ep-xray-detection-4\"","bucket_name = \"newdataa\"","endpoint = EndpointUtil(bucket_name, endpoint_name, local_folder_path)","","","app = FastAPI()","","@app.get(\"/\")","async def hello():","    return {\"hello\": \"world\"}","","","@app.get(\"/{user_id}/{threshold}\")","async def root(user_id: str, threshold: str):","    pred_df = endpoint.call(int(user_id), float(threshold))","    print(f'pred_df = {type(pred_df)}')","    ","    # Convert the recommendations to a JSON-serializable format","    pred_df = pred_df.to_dict(orient='records')","","    return JSONResponse(content=pred_df)","","","@app.get('/get_class_info')","async def get_class_info():","    # Read the classes.txt file","    with open('classes.txt', 'r') as file:","        # Read the contents of the file","        data = file.read()","    ","    # Extract the class_names dictionary using AST","    class_dict = ast.literal_eval(data.split('class_names = ')[1])","    ","    return JSONResponse(content=class_dict)","","","if __name__ == '__main__':","    import uvicorn","    uvicorn.run(\"server:app\", host='0.0.0.0', port=8080, workers=1)",""]}]]},"ace":{"folds":[],"scrolltop":240,"scrollleft":0,"selection":{"start":{"row":17,"column":18},"end":{"row":17,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1716438952936,"hash":"72e32accc832b6485dc816081d5ea22604026f61"}